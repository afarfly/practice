package org.bocai.decompiler.java;

import java.util.HashMap;
import java.util.Map;

/**
 * ²Ù×÷ÂëÖ¸Áî£¬²Î¿¼£ºhttp://docs.oracle.com/javase/specs/jvms/se7/html/jvms-7.html
 * 
 * @author yikebocai@gmail.com
 * @since 2013-3-11
 * 
 */
public class OperateCode {
	private static Map<Integer, String> map = new HashMap<Integer, String>();
	static {
		map.put(0, "nop");
		map.put(1, "aconst_null");
		map.put(2, "iconst_m1");
		map.put(3, "iconst_0");
		map.put(4, "iconst_1");
		map.put(5, "iconst_2");
		map.put(6, "iconst_3");
		map.put(7, "iconst_4");
		map.put(8, "iconst_5");
		map.put(9, "lconst_0");
		map.put(10, "lconst_1");
		map.put(11, "fconst_0");
		map.put(12, "fconst_1");
		map.put(13, "fconst_2");
		map.put(14, "dconst_0");
		map.put(15, "dconst_1");
		map.put(16, "bipush");
		map.put(17, "sipush");
		map.put(18, "ldc");
		map.put(19, "ldc_w");
		map.put(20, "ldc2_w");
		map.put(21, "iload");
		map.put(22, "lload");
		map.put(23, "fload");
		map.put(24, "dload");
		map.put(25, "aload");
		map.put(26, "iload_0");
		map.put(27, "iload_1");
		map.put(28, "iload_2");
		map.put(29, "iload_3");
		map.put(30, "lload_0");
		map.put(31, "lload_1");
		map.put(32, "lload_2");
		map.put(33, "lload_3");
		map.put(34, "fload_0");
		map.put(35, "fload_1");
		map.put(36, "fload_2");
		map.put(37, "fload_3");
		map.put(38, "dload_0");
		map.put(39, "dload_1");
		map.put(40, "dload_2");
		map.put(41, "dload_3");
		map.put(42, "aload_0");
		map.put(43, "aload_1");
		map.put(44, "aload_2");
		map.put(45, "aload_3");
		map.put(46, "iaload");
		map.put(47, "laload");
		map.put(48, "faload");
		map.put(49, "daload");
		map.put(50, "aaload");
		map.put(51, "baload");
		map.put(52, "caload");
		map.put(53, "saload");
		map.put(54, "istore");
		map.put(55, "lstore");
		map.put(56, "fstore");
		map.put(57, "dstore");
		map.put(58, "astore");
		map.put(59, "istore_0");
		map.put(60, "istore_1");
		map.put(61, "istore_2");
		map.put(62, "istore_3");
		map.put(63, "lstore_0");
		map.put(64, "lstore_1");
		map.put(65, "lstore_2");
		map.put(66, "lstore_3");
		map.put(67, "fstore_0");
		map.put(68, "fstore_1");
		map.put(69, "fstore_2");
		map.put(70, "fstore_3");
		map.put(71, "dstore_0");
		map.put(72, "dstore_1");
		map.put(73, "dstore_2");
		map.put(74, "dstore_3");
		map.put(75, "astore_0");
		map.put(76, "astore_1");
		map.put(77, "astore_2");
		map.put(78, "astore_3");
		map.put(79, "iastore");
		map.put(80, "lastore");
		map.put(81, "fastore");
		map.put(82, "dastore");
		map.put(83, "aastore");
		map.put(84, "bastore");
		map.put(85, "castore");
		map.put(86, "sastore");
		map.put(87, "pop");
		map.put(88, "pop2");
		map.put(89, "dup");
		map.put(90, "dup_x1");
		map.put(91, "dup_x2");
		map.put(92, "dup2");
		map.put(93, "dup2_x1");
		map.put(94, "dup2_x2");
		map.put(95, "swap");
		map.put(96, "iadd");
		map.put(97, "ladd");
		map.put(98, "fadd");
		map.put(99, "dadd");
		map.put(100, "isub");
		map.put(101, "lsub");
		map.put(102, "fsub");
		map.put(103, "dsub");
		map.put(104, "imul");
		map.put(105, "lmul");
		map.put(106, "fmul");
		map.put(107, "dmul");
		map.put(108, "idiv");
		map.put(109, "ldiv");
		map.put(110, "fdiv");
		map.put(111, "ddiv");
		map.put(112, "irem");
		map.put(113, "lrem");
		map.put(114, "frem");
		map.put(115, "drem");
		map.put(116, "ineg");
		map.put(117, "lneg");
		map.put(118, "fneg");
		map.put(119, "dneg");
		map.put(120, "ishl");
		map.put(121, "lshl");
		map.put(122, "ishr");
		map.put(123, "lshr");
		map.put(124, "iushr");
		map.put(125, "lushr");
		map.put(126, "iand");
		map.put(127, "land");
		map.put(128, "ior");
		map.put(129, "lor");
		map.put(130, "ixor");
		map.put(131, "lxor");
		map.put(132, "iinc");
		map.put(133, "i2l");
		map.put(134, "i2f");
		map.put(135, "i2d");
		map.put(136, "l2i");
		map.put(137, "l2f");
		map.put(138, "l2d");
		map.put(139, "f2i");
		map.put(140, "f2l");
		map.put(141, "f2d");
		map.put(142, "d2i");
		map.put(143, "d2l");
		map.put(144, "d2f");
		map.put(145, "i2b");
		map.put(146, "i2c");
		map.put(147, "i2s");
		map.put(148, "lcmp");
		map.put(149, "fcmpl");
		map.put(150, "fcmpg");
		map.put(151, "dcmpl");
		map.put(152, "dcmpg");
		map.put(153, "ifeq");
		map.put(154, "ifne");
		map.put(155, "iflt");
		map.put(156, "ifge");
		map.put(157, "ifgt");
		map.put(158, "ifle");
		map.put(159, "if_icmpeq");
		map.put(160, "if_icmpne");
		map.put(161, "if_icmplt");
		map.put(162, "if_icmpge");
		map.put(163, "if_icmpgt");
		map.put(164, "if_icmple");
		map.put(165, "if_acmpeq");
		map.put(166, "if_acmpne");
		map.put(167, "goto");
		map.put(168, "jsr");
		map.put(169, "ret");
		map.put(170, "tableswitch");
		map.put(171, "lookupswitch");
		map.put(172, "ireturn");
		map.put(173, "lreturn");
		map.put(174, "freturn");
		map.put(175, "dreturn");
		map.put(176, "areturn");
		map.put(177, "return");
		map.put(178, "getstatic");
		map.put(179, "putstatic");
		map.put(180, "getfield");
		map.put(181, "putfield");
		map.put(182, "invokevirtual");
		map.put(183, "invokespecial");
		map.put(184, "invokestatic");
		map.put(185, "invokeinterface");
		map.put(186, "invokedynamic");
		map.put(187, "new");
		map.put(188, "newarray");
		map.put(189, "anewarray");
		map.put(190, "arraylength");
		map.put(191, "athrow");
		map.put(192, "checkcast");
		map.put(193, "instanceof");
		map.put(194, "monitorenter");
		map.put(195, "monitorexit");
		map.put(196, "wide");
		map.put(197, "multianewarray");
		map.put(198, "ifnull");
		map.put(199, "ifnonnull");
		map.put(200, "goto_w");
		map.put(201, "jsr_w");
		map.put(202, "breakpoint");
		map.put(254, "impdep1");
		map.put(255, "impdep2");
	}
	
	public static String get(int code){
		return map.get(code);
	}
}
